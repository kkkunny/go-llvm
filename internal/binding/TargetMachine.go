package binding

/*
#include "llvm-c/TargetMachine.h"
*/
import "C"

type (
	LLVMTargetMachineRef struct{ c C.LLVMTargetMachineRef }
	LLVMTargetRef        struct{ c C.LLVMTargetRef }
)

func (ref LLVMTargetMachineRef) IsNil() bool { return ref.c == nil }
func (ref LLVMTargetRef) IsNil() bool        { return ref.c == nil }

type LLVMCodeGenOptLevel int32

const (
	LLVMCodeGenLevelNone LLVMCodeGenOptLevel = iota
	LLVMCodeGenLevelLess
	LLVMCodeGenLevelDefault
	LLVMCodeGenLevelAggressive
)

type LLVMRelocMode int32

const (
	LLVMRelocDefault LLVMRelocMode = iota
	LLVMRelocStatic
	LLVMRelocPIC
	LLVMRelocDynamicNoPic
	LLVMRelocROPI
	LLVMRelocRWPI
	LLVMRelocROPI_RWPI
)

type LLVMCodeModel int32

const (
	LLVMCodeModelDefault LLVMCodeModel = iota
	LLVMCodeModelJITDefault
	LLVMCodeModelTiny
	LLVMCodeModelSmall
	LLVMCodeModelKernel
	LLVMCodeModelMedium
	LLVMCodeModelLarge
)

type LLVMCodeGenFileType int32

const (
	LLVMAssemblyFile LLVMCodeGenFileType = iota
	LLVMObjectFile
)

// LLVMGetTargetFromName Finds the target corresponding to the given name and stores it in \p T.
func LLVMGetTargetFromName(name string) LLVMTargetRef {
	return string2CString(name, func(name *C.char) LLVMTargetRef {
		return LLVMTargetRef{c: C.LLVMGetTargetFromName(name)}
	})
}

// LLVMGetTargetFromTriple Finds the target corresponding to the given triple and stores it in \p T.
func LLVMGetTargetFromTriple(triple string) (LLVMTargetRef, error) {
	var t LLVMTargetRef
	err := string2CString(triple, func(triple *C.char) error {
		return llvmError2Error(func(errstr **C.char) C.LLVMBool {
			return C.LLVMGetTargetFromTriple(triple, &t.c, errstr)
		})
	})
	return t, err
}

// LLVMGetTargetName Returns the name of a target.
func LLVMGetTargetName(t LLVMTargetRef) string {
	return C.GoString(C.LLVMGetTargetName(t.c))
}

// LLVMGetTargetDescription Returns the description  of a target.
func LLVMGetTargetDescription(t LLVMTargetRef) string {
	return C.GoString(C.LLVMGetTargetDescription(t.c))
}

// LLVMTargetHasJIT Returns if the target has a JIT
func LLVMTargetHasJIT(t LLVMTargetRef) bool {
	return llvmBool2bool(C.LLVMTargetHasJIT(t.c))
}

// LLVMTargetHasTargetMachine Returns if the target has a TargetMachine associated
func LLVMTargetHasTargetMachine(t LLVMTargetRef) bool {
	return llvmBool2bool(C.LLVMTargetHasTargetMachine(t.c))
}

// LLVMTargetHasAsmBackend Returns if the target as an ASM backend (required for emitting output)
func LLVMTargetHasAsmBackend(t LLVMTargetRef) bool {
	return llvmBool2bool(C.LLVMTargetHasAsmBackend(t.c))
}

// LLVMCreateTargetMachine Creates a new llvm::TargetMachine.
func LLVMCreateTargetMachine(t LLVMTargetRef, triple string, cpu string, features string, level LLVMCodeGenOptLevel, reloc LLVMRelocMode, codeModel LLVMCodeModel) LLVMTargetMachineRef {
	return string2CString(triple, func(triple *C.char) LLVMTargetMachineRef {
		return string2CString(cpu, func(cpu *C.char) LLVMTargetMachineRef {
			return string2CString(features, func(features *C.char) LLVMTargetMachineRef {
				return LLVMTargetMachineRef{c: C.LLVMCreateTargetMachine(t.c, triple, cpu, features, C.LLVMCodeGenOptLevel(level), C.LLVMRelocMode(reloc), C.LLVMCodeModel(codeModel))}
			})
		})
	})
}

// LLVMDisposeTargetMachine Dispose the LLVMTargetMachineRef instance generated by LLVMCreateTargetMachine.
func LLVMDisposeTargetMachine(t LLVMTargetMachineRef) {
	C.LLVMDisposeTargetMachine(t.c)
}

// LLVMGetTargetMachineTarget Returns the Target used in a TargetMachine
func LLVMGetTargetMachineTarget(t LLVMTargetMachineRef) LLVMTargetRef {
	return LLVMTargetRef{c: C.LLVMGetTargetMachineTarget(t.c)}
}

// LLVMGetTargetMachineTriple Returns the triple used creating this target machine.
func LLVMGetTargetMachineTriple(t LLVMTargetMachineRef) string {
	cstring := C.LLVMGetTargetMachineTriple(t.c)
	defer LLVMDisposeMessage(cstring)
	return C.GoString(cstring)
}

// LLVMGetTargetMachineCPU Returns the cpu used creating this target machine.
func LLVMGetTargetMachineCPU(t LLVMTargetMachineRef) string {
	cstring := C.LLVMGetTargetMachineCPU(t.c)
	defer LLVMDisposeMessage(cstring)
	return C.GoString(cstring)
}

// LLVMGetTargetMachineFeatureString Returns the feature string used creating this target machine.
func LLVMGetTargetMachineFeatureString(t LLVMTargetMachineRef) string {
	cstring := C.LLVMGetTargetMachineFeatureString(t.c)
	defer LLVMDisposeMessage(cstring)
	return C.GoString(cstring)
}

// LLVMCreateTargetDataLayout Create a DataLayout based on the targetMachine.
func LLVMCreateTargetDataLayout(t LLVMTargetMachineRef) LLVMTargetDataRef {
	return LLVMTargetDataRef{c: C.LLVMCreateTargetDataLayout(t.c)}
}

// LLVMSetTargetMachineAsmVerbosity Set the target machine's ASM verbosity.
func LLVMSetTargetMachineAsmVerbosity(t LLVMTargetMachineRef, verboseAsm bool) {
	C.LLVMSetTargetMachineAsmVerbosity(t.c, bool2LLVMBool(verboseAsm))
}

// LLVMTargetMachineEmitToFile Emits an asm or object file for the given module to the filename. This wraps several c++ only classes (among them a file stream).
func LLVMTargetMachineEmitToFile(t LLVMTargetMachineRef, m LLVMModuleRef, filename string, codegen LLVMCodeGenFileType) error {
	return string2CString(filename, func(filename *C.char) error {
		return llvmError2Error(func(errstr **C.char) C.LLVMBool {
			return C.LLVMTargetMachineEmitToFile(t.c, m.c, filename, C.LLVMCodeGenFileType(codegen), errstr)
		})
	})
}

// LLVMGetDefaultTargetTriple Get a triple for the host machine as a string.
func LLVMGetDefaultTargetTriple() string {
	cstring := C.LLVMGetDefaultTargetTriple()
	defer LLVMDisposeMessage(cstring)
	return C.GoString(cstring)
}

// LLVMNormalizeTargetTriple Normalize a target triple.
func LLVMNormalizeTargetTriple(triple string) string {
	return string2CString(triple, func(triple *C.char) string {
		cstring := C.LLVMNormalizeTargetTriple(triple)
		defer LLVMDisposeMessage(cstring)
		return C.GoString(cstring)
	})
}

// LLVMGetHostCPUName Get the host CPU as a string.
func LLVMGetHostCPUName() string {
	cstring := C.LLVMGetHostCPUName()
	defer LLVMDisposeMessage(cstring)
	return C.GoString(cstring)
}

// LLVMGetHostCPUFeatures Get the host CPU's features as a string.
func LLVMGetHostCPUFeatures() string {
	cstring := C.LLVMGetHostCPUFeatures()
	defer LLVMDisposeMessage(cstring)
	return C.GoString(cstring)
}
